<div class = "container" >
  <div class = "row" >
    <h2 class = center>Algorithms</h2>
      
      <p>
        Algorithms are the bedrock of computer science and one of my favorites
        aspects of the discipline. Below, you will find a few algorithms 
        employing different strategies to solve mathematical problems. 
        Each includes a sample of code and my thoughts on each exercise.
      </p>
   
   
      <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
        <div class="panel panel-default">
          <div class="panel-heading" role="tab" id="headingOne">
            <h4 class="panel-title">
              <a data-toggle="collapse" data-parent="#accordion" href="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                Extensions of Merge-Sort
              </a>
            </h4>
           </div>
          <div id="collapseOne" class="panel-collapse collapse" role="tabpanel" aria-labelledby="headingOne">
          <div class="panel-body">
            <p>
              Divide and Conquer strategies to algorithm development often
              involve dividing a problem into subsets that are recursively
              called until they reach leaf-like elements. These are compared
              in a linear fashion to reach the end result. 
            </p>
            <p>
              Merge-Sort is a classic example of the Divide and Conquer
              algorithm design that divides an array to be sorted into
              halves that are recursively called until terminal elements
              are reached. These elements are then combined in a merge
              step. This strategy, developed by John von Neumann, 
              effectively reduces a O(n^2) brute force algorithm to a 
              O(n * log n) algorithm.
            </p>
            
            <p>
              The example provided was designed as an exercise in 
              <%= link_to 'Algorithms: Design and Analysis, Part 1' ,
              'https://www.coursera.org/course/algo' %> by Tim Roughgarden.
              This algorithm accepts an integer array and computes the number
              of inversions using a Divide and Conquer strategy. Through recursive
              calls the arrays are divided. The merge method counts the number
              of inversions and passes back an array containing the merged
              array and the count of the inversion. The sum of the merge
              step are combined with those of both recursive methods to obtain
              a final array composed of the sorted subarray and inversion
              count. This is then passed up to the previous recursive call 
              until a final count is reached.
              
              
            </p><br>
            <p><%= more_markdown(render 'experiments/algorithms/count_inversions.txt') %></p>



          </div>
        </div>
      </div>
      

   </div>   
  </div>
</div>
